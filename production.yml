volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: laid_out_production_django
    container_name: laid-out-django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
      - ./.envs/.production/.allauth
    command: /start
    networks:
      - traefik-public
      - default
    labels:
      - "traefik.enable=true"

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: laid_out_production_postgres
    container_name: laid-out-postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  redis:
    image: redis:6
    container_name: laid-out-redis

  celeryworker:
    <<: *django
    image: laid_out_production_celeryworker
    container_name: laid-out-celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: laid_out_production_celerybeat
    container_name: laid-out-celerybeat
    command: /start-celerybeat

#  flower:
#    <<: *django
#    image: laid_out_production_flower
#    container_name: laid-out-flower
#    command: /start-flower
#    networks:
#      - traefik-public
#      - default
#    labels:
#      - "traefik.enable=true"

  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_data_backups:/backups:z

networks:
  default:
  traefik-public:
    external: true
